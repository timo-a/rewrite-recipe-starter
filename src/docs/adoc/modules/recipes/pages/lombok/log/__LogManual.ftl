= Converting your Logger Declarations to Lombok Annotations

Without lombok, loggers are declared in their own field, e.g. `private static final Logger log = LoggerFactory.getLogger(FooService.class);`.
This declaration takes the class it is declared in as a parameter, which a developer might forget to change when copying classes.
Other than this parameter the declaration is the same for every class, making it boilerplate code.
Lombok can make your code more concise with a class level annotation, e.g. `@Slf4`

There are different steps to migrate to the lombok annotation depending on the specifics of your project:

[plantuml]
....
@startuml
start

repeat:inspect the names of the loggers;
backward: use regex to rename them;
repeat while (do all loggers have the same name?) is (no)


if (are all loggers named `log`?) then (yes)

elseif (do you want to use a different name?) then (yes)
  :edit lombok-config;
else (no)
  :rename manually;
endif

:use the recipe;

stop
@enduml
....

=== Ensuring all Fields have the same name

The loggers generated by Lombok will all have the same name (by default `log`), so the loggers in your project should have the same name as well.
Since the declaration is uniform you can use regular expressions to find outliers.
If you have a linux console `grep` and friends might be sufficient, see <<example-A>>footnote:[Explanation: grep shows all sequences of "Logger <fieldname> =", `awk` prints the word in the middle, `sort` prepares the data for `uniq` which displays the counts.].

.Display all logger declarations with type `Logger`. (There are other types(!), e.g. just `Log`).
[source,bash, caption="Example A:"]
[[example-A,Example A]]
----
grep -oh "Logger \w* =" -r --include=*.java | awk '{ print $2}' | sort | uniq -c
----


=== Ensuring your name matches the generated name

By default, the loggers generated by Lombok will all have the name `log`.
If you are happy to use the default name `log`, make sure that your logger fields are all called `log` in their declaration and usages.
If you want to keep using a different name you can configure that in your `lombok.config`.
If your fields are all called `LOGGER` you would need to add `lombok.log.fieldName=LOGGER` to your `lombok.config`.


=== Converting Field declarations into Annotations

Now that the repository has been prepared, we can apply a recipe:

If you are using SLF4J as a logger you can follow the steps below depending on your build system.

For `Log4j2`, or the loggers from `java.util`, `org.jboss` or `apache.commons` there are recipes as well.
You can find them via the sidebar on the left.
Lombok supports more logging frameworks like google's `Flogger` but there are no recipes for them yet.

${applytabs?join("\n")}

